import { Bot, GrammyError, HttpError } from "grammy";

import { registerContestsCallback } from "@/commands/contests-callback";

import { contestsCommand } from "./commands/contests";
import { startCommand } from "./commands/start";
import { subscribeCommand } from "./commands/subscribe";
import { BOT_TOKEN } from "./config";
import { initScheduler } from "./services/scheduler";
import { logger } from "./utils/logger";

async function main() {
    logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –§–°–ü...");

    const bot = new Bot(BOT_TOKEN);

    // –ö–æ–º–∞–Ω–¥—ã
    bot.command("start", startCommand);
    bot.command("contests", contestsCommand);
    bot.command("subscribe", subscribeCommand);

    registerContestsCallback(bot);

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    initScheduler(bot);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    bot.catch((err) => {
        const ctx = err.ctx;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
        const e = err.error;

        if (e instanceof GrammyError) {
            logger.error(`–û—à–∏–±–∫–∞ Telegram API: ${e.description}`);
        } else if (e instanceof HttpError) {
            logger.error(`–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: ${e.message}`);
        } else if (e instanceof Error) {
            logger.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.message}`);
        } else {
            logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞:", e);
        }
    });

    try {
        const me = await bot.api.getMe();
        logger.info(`‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @${me.username} (id=${me.id})`);
    } catch (err) {
        if (err instanceof Error) {
            logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: ${err.message}`);
        } else {
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", err);
        }
        process.exit(1);
    }

    await bot.start();
}

main().catch((err: unknown) => {
    if (err instanceof Error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ main(): ${err.message}`);
    } else {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ main(): –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", err);
    }
    process.exit(1);
});
