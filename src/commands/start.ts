import { InlineKeyboard } from "grammy";
import { Context } from "grammy";

import { API_BASE_URL } from "../config";
import { logger } from "../utils/logger";

export async function startCommand(ctx: Context) {
    logger.info(`/start –æ—Ç chatId=${ctx.chat?.id}`);

    try {
        const tg = ctx.from?.id;
        if (!tg) {
            return await ctx.reply("‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.");
        }

        // –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
        const deepLink = `${API_BASE_URL}/tg-link?tg=${encodeURIComponent(tg)}`;

        const keyboard = new InlineKeyboard().url("–°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", deepLink);

        await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å Telegram —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", {
            reply_markup: keyboard,
        });
    } catch (err) {
        if (err instanceof Error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: ${err.message}`);
        } else {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", err);
        }
    }
}
