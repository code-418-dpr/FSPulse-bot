import { Context } from "grammy";

import { API_BASE_URL } from "../config";
import { logger } from "../utils/logger";

export async function startCommand(ctx: Context) {
    logger.info(`/start –æ—Ç chatId=${ctx.chat?.id}`);

    try {
        await ctx.reply(
            [
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –§–°–ü.",
                "",
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                "/contests ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π",
                "/subscribe <ID> ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ",
            ].join("\n"),
            { parse_mode: "Markdown" },
        );

        const tg = ctx.from?.id;
        if (!tg) {
            return await ctx.reply("‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.");
        }

        const url = `${API_BASE_URL}/tg-link?tg=${encodeURIComponent(tg)}`;
        return await ctx.reply(`–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å Telegram —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n${url}`);
    } catch (err) {
        if (err instanceof Error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: ${err.message}`);
        } else {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", err);
        }
    }
}
