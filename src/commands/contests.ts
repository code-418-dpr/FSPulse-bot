import { Bot } from "grammy";

import { fetchUpcomingContests } from "../services/api";
import type { Contest } from "../services/api";
import { logger } from "../utils/logger";

export function registerContestsCommand(bot: Bot) {
    bot.command("contests", async (ctx) => {
        logger.info(`‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω /contests –æ—Ç chatId=${ctx.chat.id}`);
        try {
            const contests: Contest[] = await fetchUpcomingContests();
            if (contests.length === 0) {
                return await ctx.reply("ü•≤ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.");
            }

            let message = "üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:*\n\n";
            for (const c of contests) {
                message += `*ID:* \`${c.id}\`\n` + `*${c.title}*\n` + `üïí ${c.startTime.toLocaleString()}\n\n`;
            }
            message += "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n`/subscribe <ID>`";

            await ctx.reply(message, { parse_mode: "Markdown" });
            logger.debug(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${contests.length} —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.chat.id}`);
        } catch (err: unknown) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /contests: ${String(err)}`);
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    });
}
