import { Context } from "grammy";

import { fetchUpcomingContests } from "../services/api";
import { logger } from "../utils/logger";

export async function contestsCommand(ctx: Context) {
    logger.info(`/contests –æ—Ç chatId=${ctx.chat?.id}`);

    try {
        const contests = await fetchUpcomingContests();

        if (contests.length === 0) {
            return await ctx.reply("ü•≤ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.");
        }

        const messageLines = ["üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:*\n"];
        for (const contest of contests) {
            messageLines.push(
                `*ID:* \`${contest.id}\``,
                `*${contest.title}*`,
                `üïí ${new Date(contest.startTime).toLocaleString()}`,
                "",
            );
        }

        messageLines.push("–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n`/subscribe <ID>`");

        await ctx.reply(messageLines.join("\n"), { parse_mode: "Markdown" });
        logger.debug(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${contests.length} —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.chat?.id}`);
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ /contests: ${String(err)}`);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}
