import { Context, InlineKeyboard } from "grammy";

import { fetchUpcomingContests } from "../services/api";
import { logger } from "../utils/logger";

const PAGE_SIZE = 5;

export async function contestsCommand(ctx: Context) {
    logger.info(`/contests –æ—Ç chatId=${ctx.chat?.id}`);
    const text = ctx.message?.text ?? "";
    const args = text.trim().split(/\s+/).slice(1);

    const discipline = args.find((arg) => !arg.startsWith("page="));
    const pageArg = args.find((arg) => arg.startsWith("page="));
    const page = pageArg ? parseInt(pageArg.split("=")[1], 10) : 1;

    await renderContestsPage(ctx, page, discipline);
}

export async function renderContestsPage(ctx: Context, page: number, discipline?: string) {
    const offset = (page - 1) * PAGE_SIZE;

    try {
        const contests = await fetchUpcomingContests({
            limit: PAGE_SIZE,
            offset,
            discipline,
        });

        if (!Array.isArray(contests)) {
            logger.error("‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: contests is not an array");
            return await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.");
        }

        if (contests.length === 0) {
            return await ctx.reply("ü•≤ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.");
        }

        for (const contest of contests) {
            const { id, name, discipline, start, endRegistration } = contest;

            const message = [
                `üèÜ <b>${name}</b>`,
                `üÜî <code>${id}</code>`,
                `üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: <b>${discipline}</b>`,
                `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: <b>${formatDateTime(endRegistration)}</b>`,
                `üöÄ –ù–∞—á–∞–ª–æ: <b>${formatDateTime(start)}</b>`,
            ].join("\n");

            await ctx.reply(message, { parse_mode: "HTML" });
        }

        const keyboard = new InlineKeyboard();
        keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `contests:page=${page - 1}${discipline ? `&discipline=${discipline}` : ""}`);
        keyboard.text("‚û°Ô∏è –î–∞–ª–µ–µ", `contests:page=${page + 1}${discipline ? `&discipline=${discipline}` : ""}`);

        await ctx.reply(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}`, {
            reply_markup: keyboard,
        });

        logger.debug(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${contests.length} —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.chat?.id}`);
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ /contests: ${String(err)}`);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}

function formatDateTime(date: string | Date): string {
    const d = new Date(date);
    return d.toLocaleString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
    });
}
