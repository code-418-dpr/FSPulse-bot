import { Bot } from "grammy";
import cron from "node-cron";

import { SCHEDULER_CRON } from "../config";
import { logger } from "../utils/logger";
import { fetchNotificationEvents } from "./api";

const NOTIFICATION_WINDOW = 15 * 60 * 1000;
const sentReminders = new Set<string>();

type ReminderType = "DAY" | "HOUR";

function getReminderKey(eventId: string, type: ReminderType): string {
    return `${eventId}-${type}`;
}

function shouldNotify(diff: number, targetMs: number): boolean {
    return Math.abs(diff - targetMs) <= NOTIFICATION_WINDOW;
}

export function initScheduler(bot: Bot): void {
    logger.info("üõ† –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    cron.schedule(SCHEDULER_CRON, () => {
        void (async () => {
            logger.info("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...");

            try {
                const now = Date.now();
                const events = await fetchNotificationEvents();

                for (const event of events) {
                    const startTime = new Date(event.start).getTime();
                    const diff = startTime - now;

                    const typesToCheck: [ReminderType, string, number][] = [
                        [
                            "DAY",
                            `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ ¬´${event.name}¬ª –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.`,
                            24 * 60 * 60 * 1000,
                        ],
                        ["HOUR", `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ ¬´${event.name}¬ª –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.`, 60 * 60 * 1000],
                    ];

                    for (const [type, message, targetMs] of typesToCheck) {
                        const key = getReminderKey(event.id, type);

                        if (shouldNotify(diff, targetMs) && !sentReminders.has(key)) {
                            logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${type}‚Äë–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ ${event.name} (${event.id})`);

                            for (const tgId of event.tgIds) {
                                try {
                                    await bot.api.sendMessage(tgId, message);
                                } catch (err) {
                                    logger.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${tgId}: ${String(err)}`);
                                }
                            }

                            sentReminders.add(key);
                        }
                    }
                }

                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
            } catch (err) {
                logger.error(`üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: ${String(err)}`);
            }
        })();
    });
}
